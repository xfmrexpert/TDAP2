/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_TransFE(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_TransFE(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_TransFE(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include "feprog.h"
#include "MeshDB/mesh.h"
#include "MeshDB/meshentity.h"
#include "MeshDB/meshvertex.h"
#include "MeshDB/meshedge.h"
#include "MeshDB/meshface.h"
#include "MeshDB/node.h"
#include "dof.h"

SWIGINTERN std::vector< Node * > *new_std_vector_Sl_Node_Sm__Sg___SWIG_2(int capacity){
        std::vector< Node * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Node * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Node *std_vector_Sl_Node_Sm__Sg__getitemcopy(std::vector< Node * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN std::vector< Node * >::value_type const &std_vector_Sl_Node_Sm__Sg__getitem(std::vector< Node * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sm__Sg__setitem(std::vector< Node * > *self,int index,Node *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sm__Sg__AddRange(std::vector< Node * > *self,std::vector< Node * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Node * > *std_vector_Sl_Node_Sm__Sg__GetRange(std::vector< Node * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Node * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Node_Sm__Sg__Insert(std::vector< Node * > *self,int index,Node *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sm__Sg__InsertRange(std::vector< Node * > *self,int index,std::vector< Node * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sm__Sg__RemoveAt(std::vector< Node * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Node_Sm__Sg__RemoveRange(std::vector< Node * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Node * > *std_vector_Sl_Node_Sm__Sg__Repeat(Node *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Node * >(count, value);
      }
SWIGINTERN void std_vector_Sl_Node_Sm__Sg__Reverse__SWIG_0(std::vector< Node * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Node_Sm__Sg__Reverse__SWIG_1(std::vector< Node * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Node_Sm__Sg__SetRange(std::vector< Node * > *self,int index,std::vector< Node * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_Node_Sm__Sg__Contains(std::vector< Node * > *self,Node *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_Node_Sm__Sg__IndexOf(std::vector< Node * > *self,Node *const &value){
        int index = -1;
        std::vector< Node * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_Node_Sm__Sg__LastIndexOf(std::vector< Node * > *self,Node *const &value){
        int index = -1;
        std::vector< Node * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_Node_Sm__Sg__Remove(std::vector< Node * > *self,Node *const &value){
        std::vector< Node * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< DOF * > *new_std_vector_Sl_DOF_Sm__Sg___SWIG_2(int capacity){
        std::vector< DOF * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< DOF * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN DOF *std_vector_Sl_DOF_Sm__Sg__getitemcopy(std::vector< DOF * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< DOF * >::value_type const &std_vector_Sl_DOF_Sm__Sg__getitem(std::vector< DOF * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_DOF_Sm__Sg__setitem(std::vector< DOF * > *self,int index,DOF *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_DOF_Sm__Sg__AddRange(std::vector< DOF * > *self,std::vector< DOF * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< DOF * > *std_vector_Sl_DOF_Sm__Sg__GetRange(std::vector< DOF * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< DOF * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_DOF_Sm__Sg__Insert(std::vector< DOF * > *self,int index,DOF *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_DOF_Sm__Sg__InsertRange(std::vector< DOF * > *self,int index,std::vector< DOF * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_DOF_Sm__Sg__RemoveAt(std::vector< DOF * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_DOF_Sm__Sg__RemoveRange(std::vector< DOF * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< DOF * > *std_vector_Sl_DOF_Sm__Sg__Repeat(DOF *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< DOF * >(count, value);
      }
SWIGINTERN void std_vector_Sl_DOF_Sm__Sg__Reverse__SWIG_0(std::vector< DOF * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_DOF_Sm__Sg__Reverse__SWIG_1(std::vector< DOF * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_DOF_Sm__Sg__SetRange(std::vector< DOF * > *self,int index,std::vector< DOF * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_DOF_Sm__Sg__Contains(std::vector< DOF * > *self,DOF *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_DOF_Sm__Sg__IndexOf(std::vector< DOF * > *self,DOF *const &value){
        int index = -1;
        std::vector< DOF * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_DOF_Sm__Sg__LastIndexOf(std::vector< DOF * > *self,DOF *const &value){
        int index = -1;
        std::vector< DOF * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_DOF_Sm__Sg__Remove(std::vector< DOF * > *self,DOF *const &value){
        std::vector< DOF * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< MeshFace * > *new_std_vector_Sl_MeshFace_Sm__Sg___SWIG_2(int capacity){
        std::vector< MeshFace * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< MeshFace * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN MeshFace *std_vector_Sl_MeshFace_Sm__Sg__getitemcopy(std::vector< MeshFace * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< MeshFace * >::value_type const &std_vector_Sl_MeshFace_Sm__Sg__getitem(std::vector< MeshFace * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MeshFace_Sm__Sg__setitem(std::vector< MeshFace * > *self,int index,MeshFace *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MeshFace_Sm__Sg__AddRange(std::vector< MeshFace * > *self,std::vector< MeshFace * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< MeshFace * > *std_vector_Sl_MeshFace_Sm__Sg__GetRange(std::vector< MeshFace * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< MeshFace * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MeshFace_Sm__Sg__Insert(std::vector< MeshFace * > *self,int index,MeshFace *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MeshFace_Sm__Sg__InsertRange(std::vector< MeshFace * > *self,int index,std::vector< MeshFace * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MeshFace_Sm__Sg__RemoveAt(std::vector< MeshFace * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MeshFace_Sm__Sg__RemoveRange(std::vector< MeshFace * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< MeshFace * > *std_vector_Sl_MeshFace_Sm__Sg__Repeat(MeshFace *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< MeshFace * >(count, value);
      }
SWIGINTERN void std_vector_Sl_MeshFace_Sm__Sg__Reverse__SWIG_0(std::vector< MeshFace * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_MeshFace_Sm__Sg__Reverse__SWIG_1(std::vector< MeshFace * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MeshFace_Sm__Sg__SetRange(std::vector< MeshFace * > *self,int index,std::vector< MeshFace * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_MeshFace_Sm__Sg__Contains(std::vector< MeshFace * > *self,MeshFace *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_MeshFace_Sm__Sg__IndexOf(std::vector< MeshFace * > *self,MeshFace *const &value){
        int index = -1;
        std::vector< MeshFace * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_MeshFace_Sm__Sg__LastIndexOf(std::vector< MeshFace * > *self,MeshFace *const &value){
        int index = -1;
        std::vector< MeshFace * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_MeshFace_Sm__Sg__Remove(std::vector< MeshFace * > *self,MeshFace *const &value){
        std::vector< MeshFace * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< MeshEdge * > *new_std_vector_Sl_MeshEdge_Sm__Sg___SWIG_2(int capacity){
        std::vector< MeshEdge * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< MeshEdge * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN MeshEdge *std_vector_Sl_MeshEdge_Sm__Sg__getitemcopy(std::vector< MeshEdge * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< MeshEdge * >::value_type const &std_vector_Sl_MeshEdge_Sm__Sg__getitem(std::vector< MeshEdge * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MeshEdge_Sm__Sg__setitem(std::vector< MeshEdge * > *self,int index,MeshEdge *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MeshEdge_Sm__Sg__AddRange(std::vector< MeshEdge * > *self,std::vector< MeshEdge * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< MeshEdge * > *std_vector_Sl_MeshEdge_Sm__Sg__GetRange(std::vector< MeshEdge * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< MeshEdge * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MeshEdge_Sm__Sg__Insert(std::vector< MeshEdge * > *self,int index,MeshEdge *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MeshEdge_Sm__Sg__InsertRange(std::vector< MeshEdge * > *self,int index,std::vector< MeshEdge * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MeshEdge_Sm__Sg__RemoveAt(std::vector< MeshEdge * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_MeshEdge_Sm__Sg__RemoveRange(std::vector< MeshEdge * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< MeshEdge * > *std_vector_Sl_MeshEdge_Sm__Sg__Repeat(MeshEdge *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< MeshEdge * >(count, value);
      }
SWIGINTERN void std_vector_Sl_MeshEdge_Sm__Sg__Reverse__SWIG_0(std::vector< MeshEdge * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_MeshEdge_Sm__Sg__Reverse__SWIG_1(std::vector< MeshEdge * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_MeshEdge_Sm__Sg__SetRange(std::vector< MeshEdge * > *self,int index,std::vector< MeshEdge * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_MeshEdge_Sm__Sg__Contains(std::vector< MeshEdge * > *self,MeshEdge *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_MeshEdge_Sm__Sg__IndexOf(std::vector< MeshEdge * > *self,MeshEdge *const &value){
        int index = -1;
        std::vector< MeshEdge * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_MeshEdge_Sm__Sg__LastIndexOf(std::vector< MeshEdge * > *self,MeshEdge *const &value){
        int index = -1;
        std::vector< MeshEdge * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_MeshEdge_Sm__Sg__Remove(std::vector< MeshEdge * > *self,MeshEdge *const &value){
        std::vector< MeshEdge * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_Clear(void * jarg1) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_Add(void * jarg1, void * jarg2) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  Node **arg2 = 0 ;
  Node *temp2 = 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  temp2 = (Node *)(((std::shared_ptr< const Node > *)jarg2) ? ((std::shared_ptr< const Node > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  (arg1)->push_back((Node *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_NodePtrVec_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  std::vector< Node * >::size_type result;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  result = ((std::vector< Node * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_NodePtrVec_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  std::vector< Node * >::size_type result;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  result = ((std::vector< Node * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  std::vector< Node * >::size_type arg2 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (std::vector< Node * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NodePtrVec__SWIG_0() {
  void * jresult ;
  std::vector< Node * > *result = 0 ;
  
  result = (std::vector< Node * > *)new std::vector< Node * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NodePtrVec__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Node * > *arg1 = 0 ;
  std::vector< Node * > *result = 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< Node * > *)new std::vector< Node * >((std::vector< Node * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NodePtrVec__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Node * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Node * > *)new_std_vector_Sl_Node_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NodePtrVec_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  Node *result = 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Node *)std_vector_Sl_Node_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result ? new std::shared_ptr<  Node >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NodePtrVec_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  std::vector< Node * >::value_type *result = 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Node * >::value_type *) &std_vector_Sl_Node_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::shared_ptr< const Node >(*result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  Node **arg3 = 0 ;
  Node *temp3 = 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (Node *)(((std::shared_ptr< const Node > *)jarg3) ? ((std::shared_ptr< const Node > *)jarg3)->get() : 0);
  arg3 = &temp3; 
  try {
    std_vector_Sl_Node_Sm__Sg__setitem(arg1,arg2,(Node *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_AddRange(void * jarg1, void * jarg2) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  std::vector< Node * > *arg2 = 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (std::vector< Node * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_Node_Sm__Sg__AddRange(arg1,(std::vector< Node * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NodePtrVec_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Node * > *result = 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Node * > *)std_vector_Sl_Node_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  Node **arg3 = 0 ;
  Node *temp3 = 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (Node *)(((std::shared_ptr< const Node > *)jarg3) ? ((std::shared_ptr< const Node > *)jarg3)->get() : 0);
  arg3 = &temp3; 
  try {
    std_vector_Sl_Node_Sm__Sg__Insert(arg1,arg2,(Node *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  std::vector< Node * > *arg3 = 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Node * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Node_Sm__Sg__InsertRange(arg1,arg2,(std::vector< Node * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Node_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Node_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NodePtrVec_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Node **arg1 = 0 ;
  int arg2 ;
  Node *temp1 = 0 ;
  std::vector< Node * > *result = 0 ;
  
  temp1 = (Node *)(((std::shared_ptr< const Node > *)jarg1) ? ((std::shared_ptr< const Node > *)jarg1)->get() : 0);
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Node * > *)std_vector_Sl_Node_Sm__Sg__Repeat((Node *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_Reverse__SWIG_0(void * jarg1) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  std_vector_Sl_Node_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Node_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NodePtrVec_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  std::vector< Node * > *arg3 = 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Node * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Node * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Node_Sm__Sg__SetRange(arg1,arg2,(std::vector< Node * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodePtrVec_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  Node **arg2 = 0 ;
  Node *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  temp2 = (Node *)(((std::shared_ptr< const Node > *)jarg2) ? ((std::shared_ptr< const Node > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_Node_Sm__Sg__Contains(arg1,(Node *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NodePtrVec_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  Node **arg2 = 0 ;
  Node *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  temp2 = (Node *)(((std::shared_ptr< const Node > *)jarg2) ? ((std::shared_ptr< const Node > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (int)std_vector_Sl_Node_Sm__Sg__IndexOf(arg1,(Node *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NodePtrVec_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  Node **arg2 = 0 ;
  Node *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  temp2 = (Node *)(((std::shared_ptr< const Node > *)jarg2) ? ((std::shared_ptr< const Node > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (int)std_vector_Sl_Node_Sm__Sg__LastIndexOf(arg1,(Node *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NodePtrVec_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  Node **arg2 = 0 ;
  Node *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  temp2 = (Node *)(((std::shared_ptr< const Node > *)jarg2) ? ((std::shared_ptr< const Node > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_Node_Sm__Sg__Remove(arg1,(Node *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NodePtrVec(void * jarg1) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  
  arg1 = (std::vector< Node * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_Clear(void * jarg1) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_Add(void * jarg1, void * jarg2) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  DOF **arg2 = 0 ;
  DOF *temp2 = 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  temp2 = (DOF *)(((std::shared_ptr< const DOF > *)jarg2) ? ((std::shared_ptr< const DOF > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  (arg1)->push_back((DOF *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DOFPtrVec_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  std::vector< DOF * >::size_type result;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  result = ((std::vector< DOF * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DOFPtrVec_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  std::vector< DOF * >::size_type result;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  result = ((std::vector< DOF * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  std::vector< DOF * >::size_type arg2 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (std::vector< DOF * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DOFPtrVec__SWIG_0() {
  void * jresult ;
  std::vector< DOF * > *result = 0 ;
  
  result = (std::vector< DOF * > *)new std::vector< DOF * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DOFPtrVec__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< DOF * > *arg1 = 0 ;
  std::vector< DOF * > *result = 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< DOF * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< DOF * > *)new std::vector< DOF * >((std::vector< DOF * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DOFPtrVec__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< DOF * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< DOF * > *)new_std_vector_Sl_DOF_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DOFPtrVec_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  int arg2 ;
  DOF *result = 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (DOF *)std_vector_Sl_DOF_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result ? new std::shared_ptr<  DOF >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DOFPtrVec_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  int arg2 ;
  std::vector< DOF * >::value_type *result = 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< DOF * >::value_type *) &std_vector_Sl_DOF_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::shared_ptr< const DOF >(*result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  int arg2 ;
  DOF **arg3 = 0 ;
  DOF *temp3 = 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (DOF *)(((std::shared_ptr< const DOF > *)jarg3) ? ((std::shared_ptr< const DOF > *)jarg3)->get() : 0);
  arg3 = &temp3; 
  try {
    std_vector_Sl_DOF_Sm__Sg__setitem(arg1,arg2,(DOF *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_AddRange(void * jarg1, void * jarg2) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  std::vector< DOF * > *arg2 = 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (std::vector< DOF * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< DOF * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_DOF_Sm__Sg__AddRange(arg1,(std::vector< DOF * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DOFPtrVec_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< DOF * > *result = 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< DOF * > *)std_vector_Sl_DOF_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  int arg2 ;
  DOF **arg3 = 0 ;
  DOF *temp3 = 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (DOF *)(((std::shared_ptr< const DOF > *)jarg3) ? ((std::shared_ptr< const DOF > *)jarg3)->get() : 0);
  arg3 = &temp3; 
  try {
    std_vector_Sl_DOF_Sm__Sg__Insert(arg1,arg2,(DOF *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  int arg2 ;
  std::vector< DOF * > *arg3 = 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< DOF * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< DOF * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_DOF_Sm__Sg__InsertRange(arg1,arg2,(std::vector< DOF * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_RemoveAt(void * jarg1, int jarg2) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_DOF_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_DOF_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DOFPtrVec_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  DOF **arg1 = 0 ;
  int arg2 ;
  DOF *temp1 = 0 ;
  std::vector< DOF * > *result = 0 ;
  
  temp1 = (DOF *)(((std::shared_ptr< const DOF > *)jarg1) ? ((std::shared_ptr< const DOF > *)jarg1)->get() : 0);
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< DOF * > *)std_vector_Sl_DOF_Sm__Sg__Repeat((DOF *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_Reverse__SWIG_0(void * jarg1) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  std_vector_Sl_DOF_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_DOF_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOFPtrVec_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  int arg2 ;
  std::vector< DOF * > *arg3 = 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< DOF * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< DOF * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_DOF_Sm__Sg__SetRange(arg1,arg2,(std::vector< DOF * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DOFPtrVec_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  DOF **arg2 = 0 ;
  DOF *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  temp2 = (DOF *)(((std::shared_ptr< const DOF > *)jarg2) ? ((std::shared_ptr< const DOF > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_DOF_Sm__Sg__Contains(arg1,(DOF *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DOFPtrVec_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  DOF **arg2 = 0 ;
  DOF *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  temp2 = (DOF *)(((std::shared_ptr< const DOF > *)jarg2) ? ((std::shared_ptr< const DOF > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (int)std_vector_Sl_DOF_Sm__Sg__IndexOf(arg1,(DOF *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DOFPtrVec_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  DOF **arg2 = 0 ;
  DOF *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  temp2 = (DOF *)(((std::shared_ptr< const DOF > *)jarg2) ? ((std::shared_ptr< const DOF > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (int)std_vector_Sl_DOF_Sm__Sg__LastIndexOf(arg1,(DOF *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DOFPtrVec_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  DOF **arg2 = 0 ;
  DOF *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  temp2 = (DOF *)(((std::shared_ptr< const DOF > *)jarg2) ? ((std::shared_ptr< const DOF > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_DOF_Sm__Sg__Remove(arg1,(DOF *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DOFPtrVec(void * jarg1) {
  std::vector< DOF * > *arg1 = (std::vector< DOF * > *) 0 ;
  
  arg1 = (std::vector< DOF * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_Clear(void * jarg1) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_Add(void * jarg1, void * jarg2) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  MeshFace **arg2 = 0 ;
  MeshFace *temp2 = 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  temp2 = (MeshFace *)(((std::shared_ptr< const MeshFace > *)jarg2) ? ((std::shared_ptr< const MeshFace > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  (arg1)->push_back((MeshFace *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MeshFacePtrVec_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  std::vector< MeshFace * >::size_type result;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  result = ((std::vector< MeshFace * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MeshFacePtrVec_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  std::vector< MeshFace * >::size_type result;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  result = ((std::vector< MeshFace * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  std::vector< MeshFace * >::size_type arg2 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (std::vector< MeshFace * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshFacePtrVec__SWIG_0() {
  void * jresult ;
  std::vector< MeshFace * > *result = 0 ;
  
  result = (std::vector< MeshFace * > *)new std::vector< MeshFace * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshFacePtrVec__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< MeshFace * > *arg1 = 0 ;
  std::vector< MeshFace * > *result = 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MeshFace * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< MeshFace * > *)new std::vector< MeshFace * >((std::vector< MeshFace * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshFacePtrVec__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< MeshFace * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< MeshFace * > *)new_std_vector_Sl_MeshFace_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFacePtrVec_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  int arg2 ;
  MeshFace *result = 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (MeshFace *)std_vector_Sl_MeshFace_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result ? new std::shared_ptr<  MeshFace >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFacePtrVec_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  int arg2 ;
  std::vector< MeshFace * >::value_type *result = 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MeshFace * >::value_type *) &std_vector_Sl_MeshFace_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::shared_ptr< const MeshFace >(*result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  int arg2 ;
  MeshFace **arg3 = 0 ;
  MeshFace *temp3 = 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (MeshFace *)(((std::shared_ptr< const MeshFace > *)jarg3) ? ((std::shared_ptr< const MeshFace > *)jarg3)->get() : 0);
  arg3 = &temp3; 
  try {
    std_vector_Sl_MeshFace_Sm__Sg__setitem(arg1,arg2,(MeshFace *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_AddRange(void * jarg1, void * jarg2) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  std::vector< MeshFace * > *arg2 = 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (std::vector< MeshFace * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MeshFace * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_MeshFace_Sm__Sg__AddRange(arg1,(std::vector< MeshFace * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFacePtrVec_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< MeshFace * > *result = 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< MeshFace * > *)std_vector_Sl_MeshFace_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  int arg2 ;
  MeshFace **arg3 = 0 ;
  MeshFace *temp3 = 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (MeshFace *)(((std::shared_ptr< const MeshFace > *)jarg3) ? ((std::shared_ptr< const MeshFace > *)jarg3)->get() : 0);
  arg3 = &temp3; 
  try {
    std_vector_Sl_MeshFace_Sm__Sg__Insert(arg1,arg2,(MeshFace *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  int arg2 ;
  std::vector< MeshFace * > *arg3 = 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MeshFace * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MeshFace * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MeshFace_Sm__Sg__InsertRange(arg1,arg2,(std::vector< MeshFace * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_RemoveAt(void * jarg1, int jarg2) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_MeshFace_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MeshFace_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFacePtrVec_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  MeshFace **arg1 = 0 ;
  int arg2 ;
  MeshFace *temp1 = 0 ;
  std::vector< MeshFace * > *result = 0 ;
  
  temp1 = (MeshFace *)(((std::shared_ptr< const MeshFace > *)jarg1) ? ((std::shared_ptr< const MeshFace > *)jarg1)->get() : 0);
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MeshFace * > *)std_vector_Sl_MeshFace_Sm__Sg__Repeat((MeshFace *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_Reverse__SWIG_0(void * jarg1) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  std_vector_Sl_MeshFace_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MeshFace_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFacePtrVec_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  int arg2 ;
  std::vector< MeshFace * > *arg3 = 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MeshFace * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MeshFace * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MeshFace_Sm__Sg__SetRange(arg1,arg2,(std::vector< MeshFace * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshFacePtrVec_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  MeshFace **arg2 = 0 ;
  MeshFace *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  temp2 = (MeshFace *)(((std::shared_ptr< const MeshFace > *)jarg2) ? ((std::shared_ptr< const MeshFace > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_MeshFace_Sm__Sg__Contains(arg1,(MeshFace *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshFacePtrVec_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  MeshFace **arg2 = 0 ;
  MeshFace *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  temp2 = (MeshFace *)(((std::shared_ptr< const MeshFace > *)jarg2) ? ((std::shared_ptr< const MeshFace > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (int)std_vector_Sl_MeshFace_Sm__Sg__IndexOf(arg1,(MeshFace *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshFacePtrVec_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  MeshFace **arg2 = 0 ;
  MeshFace *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  temp2 = (MeshFace *)(((std::shared_ptr< const MeshFace > *)jarg2) ? ((std::shared_ptr< const MeshFace > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (int)std_vector_Sl_MeshFace_Sm__Sg__LastIndexOf(arg1,(MeshFace *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshFacePtrVec_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  MeshFace **arg2 = 0 ;
  MeshFace *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  temp2 = (MeshFace *)(((std::shared_ptr< const MeshFace > *)jarg2) ? ((std::shared_ptr< const MeshFace > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_MeshFace_Sm__Sg__Remove(arg1,(MeshFace *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshFacePtrVec(void * jarg1) {
  std::vector< MeshFace * > *arg1 = (std::vector< MeshFace * > *) 0 ;
  
  arg1 = (std::vector< MeshFace * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_Clear(void * jarg1) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_Add(void * jarg1, void * jarg2) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  MeshEdge **arg2 = 0 ;
  MeshEdge *temp2 = 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  temp2 = (MeshEdge *)(((std::shared_ptr< const MeshEdge > *)jarg2) ? ((std::shared_ptr< const MeshEdge > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  (arg1)->push_back((MeshEdge *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MeshEdgePtrVec_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  std::vector< MeshEdge * >::size_type result;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  result = ((std::vector< MeshEdge * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MeshEdgePtrVec_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  std::vector< MeshEdge * >::size_type result;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  result = ((std::vector< MeshEdge * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  std::vector< MeshEdge * >::size_type arg2 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (std::vector< MeshEdge * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshEdgePtrVec__SWIG_0() {
  void * jresult ;
  std::vector< MeshEdge * > *result = 0 ;
  
  result = (std::vector< MeshEdge * > *)new std::vector< MeshEdge * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshEdgePtrVec__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< MeshEdge * > *arg1 = 0 ;
  std::vector< MeshEdge * > *result = 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MeshEdge * > const & is null", 0);
    return 0;
  } 
  result = (std::vector< MeshEdge * > *)new std::vector< MeshEdge * >((std::vector< MeshEdge * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshEdgePtrVec__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< MeshEdge * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< MeshEdge * > *)new_std_vector_Sl_MeshEdge_Sm__Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdgePtrVec_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  int arg2 ;
  MeshEdge *result = 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (MeshEdge *)std_vector_Sl_MeshEdge_Sm__Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result ? new std::shared_ptr<  MeshEdge >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdgePtrVec_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  int arg2 ;
  std::vector< MeshEdge * >::value_type *result = 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MeshEdge * >::value_type *) &std_vector_Sl_MeshEdge_Sm__Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new std::shared_ptr< const MeshEdge >(*result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  int arg2 ;
  MeshEdge **arg3 = 0 ;
  MeshEdge *temp3 = 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (MeshEdge *)(((std::shared_ptr< const MeshEdge > *)jarg3) ? ((std::shared_ptr< const MeshEdge > *)jarg3)->get() : 0);
  arg3 = &temp3; 
  try {
    std_vector_Sl_MeshEdge_Sm__Sg__setitem(arg1,arg2,(MeshEdge *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_AddRange(void * jarg1, void * jarg2) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  std::vector< MeshEdge * > *arg2 = 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (std::vector< MeshEdge * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MeshEdge * > const & is null", 0);
    return ;
  } 
  std_vector_Sl_MeshEdge_Sm__Sg__AddRange(arg1,(std::vector< MeshEdge * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdgePtrVec_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< MeshEdge * > *result = 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< MeshEdge * > *)std_vector_Sl_MeshEdge_Sm__Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  int arg2 ;
  MeshEdge **arg3 = 0 ;
  MeshEdge *temp3 = 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (MeshEdge *)(((std::shared_ptr< const MeshEdge > *)jarg3) ? ((std::shared_ptr< const MeshEdge > *)jarg3)->get() : 0);
  arg3 = &temp3; 
  try {
    std_vector_Sl_MeshEdge_Sm__Sg__Insert(arg1,arg2,(MeshEdge *const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  int arg2 ;
  std::vector< MeshEdge * > *arg3 = 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MeshEdge * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MeshEdge * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MeshEdge_Sm__Sg__InsertRange(arg1,arg2,(std::vector< MeshEdge * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_RemoveAt(void * jarg1, int jarg2) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_MeshEdge_Sm__Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MeshEdge_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdgePtrVec_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  MeshEdge **arg1 = 0 ;
  int arg2 ;
  MeshEdge *temp1 = 0 ;
  std::vector< MeshEdge * > *result = 0 ;
  
  temp1 = (MeshEdge *)(((std::shared_ptr< const MeshEdge > *)jarg1) ? ((std::shared_ptr< const MeshEdge > *)jarg1)->get() : 0);
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< MeshEdge * > *)std_vector_Sl_MeshEdge_Sm__Sg__Repeat((MeshEdge *const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_Reverse__SWIG_0(void * jarg1) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  std_vector_Sl_MeshEdge_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_MeshEdge_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdgePtrVec_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  int arg2 ;
  std::vector< MeshEdge * > *arg3 = 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< MeshEdge * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< MeshEdge * > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_MeshEdge_Sm__Sg__SetRange(arg1,arg2,(std::vector< MeshEdge * > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshEdgePtrVec_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  MeshEdge **arg2 = 0 ;
  MeshEdge *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  temp2 = (MeshEdge *)(((std::shared_ptr< const MeshEdge > *)jarg2) ? ((std::shared_ptr< const MeshEdge > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_MeshEdge_Sm__Sg__Contains(arg1,(MeshEdge *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshEdgePtrVec_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  MeshEdge **arg2 = 0 ;
  MeshEdge *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  temp2 = (MeshEdge *)(((std::shared_ptr< const MeshEdge > *)jarg2) ? ((std::shared_ptr< const MeshEdge > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (int)std_vector_Sl_MeshEdge_Sm__Sg__IndexOf(arg1,(MeshEdge *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshEdgePtrVec_LastIndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  MeshEdge **arg2 = 0 ;
  MeshEdge *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  temp2 = (MeshEdge *)(((std::shared_ptr< const MeshEdge > *)jarg2) ? ((std::shared_ptr< const MeshEdge > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (int)std_vector_Sl_MeshEdge_Sm__Sg__LastIndexOf(arg1,(MeshEdge *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshEdgePtrVec_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  MeshEdge **arg2 = 0 ;
  MeshEdge *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  temp2 = (MeshEdge *)(((std::shared_ptr< const MeshEdge > *)jarg2) ? ((std::shared_ptr< const MeshEdge > *)jarg2)->get() : 0);
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_MeshEdge_Sm__Sg__Remove(arg1,(MeshEdge *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshEdgePtrVec(void * jarg1) {
  std::vector< MeshEdge * > *arg1 = (std::vector< MeshEdge * > *) 0 ;
  
  arg1 = (std::vector< MeshEdge * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FEProg_theAnalysis_set(void * jarg1, void * jarg2) {
  FEProg *arg1 = (FEProg *) 0 ;
  MagAxiStaticAnalysis *arg2 = (MagAxiStaticAnalysis *) 0 ;
  
  arg1 = (FEProg *)jarg1; 
  arg2 = (MagAxiStaticAnalysis *)jarg2; 
  if (arg1) (arg1)->theAnalysis = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEProg_theAnalysis_get(void * jarg1) {
  void * jresult ;
  FEProg *arg1 = (FEProg *) 0 ;
  MagAxiStaticAnalysis *result = 0 ;
  
  arg1 = (FEProg *)jarg1; 
  result = (MagAxiStaticAnalysis *) ((arg1)->theAnalysis);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FEProg() {
  void * jresult ;
  FEProg *result = 0 ;
  
  result = (FEProg *)new FEProg();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FEProg(void * jarg1) {
  FEProg *arg1 = (FEProg *) 0 ;
  
  arg1 = (FEProg *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FEProg_run_FEA(void * jarg1, const char * jarg2, int jarg3) {
  void * jresult ;
  FEProg *arg1 = (FEProg *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  shared_ptr< Mesh > result;
  
  arg1 = (FEProg *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  result = (arg1)->run_FEA((std::string const &)*arg2,arg3);
  jresult = result ? new shared_ptr< Mesh >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh() {
  void * jresult ;
  Mesh *result = 0 ;
  
  result = (Mesh *)new Mesh();
  
  jresult = result ? new std::shared_ptr<  Mesh >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mesh(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_newRegion(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  MeshRegion *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  result = (MeshRegion *) &(arg1)->newRegion();
  jresult = new std::shared_ptr<  MeshRegion >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_newFace(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  MeshFace *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  result = (MeshFace *) &(arg1)->newFace();
  jresult = new std::shared_ptr<  MeshFace >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_newEdge(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  MeshEdge *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  result = (MeshEdge *) &(arg1)->newEdge();
  jresult = new std::shared_ptr<  MeshEdge >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_newVertex(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  MeshVertex *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  result = (MeshVertex *) &(arg1)->newVertex();
  jresult = new std::shared_ptr<  MeshVertex >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_newNode(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  Node *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Node *) &(arg1)->newNode();
  jresult = new std::shared_ptr<  Node >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getRegion(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  size_t arg2 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  MeshRegion *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (MeshRegion *) &(arg1)->getRegion(arg2);
  jresult = new std::shared_ptr<  MeshRegion >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getFace(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  size_t arg2 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  MeshFace *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (MeshFace *) &(arg1)->getFace(arg2);
  jresult = new std::shared_ptr<  MeshFace >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getEdge(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  size_t arg2 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  MeshEdge *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (MeshEdge *) &(arg1)->getEdge(arg2);
  jresult = new std::shared_ptr<  MeshEdge >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getVertex(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  size_t arg2 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  MeshVertex *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (MeshVertex *) &(arg1)->getVertex(arg2);
  jresult = new std::shared_ptr<  MeshVertex >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getNode(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  size_t arg2 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  Node *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  result = (Node *) &(arg1)->getNode(arg2);
  jresult = new std::shared_ptr<  Node >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getNodes(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh const > *smartarg1 = 0 ;
  std::vector< Node * > result;
  
  
  smartarg1 = (std::shared_ptr< const Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((Mesh const *)arg1)->getNodes();
  jresult = new std::vector< Node * >(result); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Mesh_numRegions(void * jarg1) {
  unsigned long jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->numRegions();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Mesh_numFaces(void * jarg1) {
  unsigned long jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->numFaces();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Mesh_numEdges(void * jarg1) {
  unsigned long jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->numEdges();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Mesh_numVertexes(void * jarg1) {
  unsigned long jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->numVertexes();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Mesh_numNodes(void * jarg1) {
  unsigned long jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->numNodes();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_reorder(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->reorder();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_reorder2(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->reorder2();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_readMesh(void * jarg1, void * jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  string arg2 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  string *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (string *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null string", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->readMesh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_readAttributes(void * jarg1, char * jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  std::shared_ptr< Mesh > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Mesh > *)jarg1;
  arg1 = (Mesh *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (char *)jarg2; 
  (arg1)->readAttributes((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEntity_ID_set(void * jarg1, unsigned long jarg2) {
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  size_t arg2 ;
  std::shared_ptr< MeshEntity > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshEntity > *)jarg1;
  arg1 = (MeshEntity *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MeshEntity_ID_get(void * jarg1) {
  unsigned long jresult ;
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  std::shared_ptr< MeshEntity > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<  MeshEntity > *)jarg1;
  arg1 = (MeshEntity *)(smartarg1 ? smartarg1->get() : 0); 
  result =  ((arg1)->ID);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshEntity(void * jarg1) {
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  std::shared_ptr< MeshEntity > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshEntity > *)jarg1;
  arg1 = (MeshEntity *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshEntity_get_dimensions(void * jarg1) {
  int jresult ;
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  std::shared_ptr< MeshEntity const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const MeshEntity > *)jarg1;
  arg1 = (MeshEntity *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((MeshEntity const *)arg1)->get_dimensions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEntity_node_set(void * jarg1, void * jarg2) {
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  Node *arg2 = (Node *) 0 ;
  std::shared_ptr< MeshEntity > *smartarg1 = 0 ;
  std::shared_ptr< Node > *smartarg2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshEntity > *)jarg1;
  arg1 = (MeshEntity *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr<  Node > *)jarg2;
  arg2 = (Node *)(smartarg2 ? smartarg2->get() : 0); 
  if (arg1) (arg1)->node = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEntity_node_get(void * jarg1) {
  void * jresult ;
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  std::shared_ptr< MeshEntity > *smartarg1 = 0 ;
  Node *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshEntity > *)jarg1;
  arg1 = (MeshEntity *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Node *) ((arg1)->node);
  
  jresult = result ? new std::shared_ptr<  Node >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEntity_getClassification(void * jarg1) {
  void * jresult ;
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  std::shared_ptr< MeshEntity > *smartarg1 = 0 ;
  GeomEntity *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshEntity > *)jarg1;
  arg1 = (MeshEntity *)(smartarg1 ? smartarg1->get() : 0); 
  result = (GeomEntity *)(arg1)->getClassification();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEntity_setClassification(void * jarg1, void * jarg2) {
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  GeomEntity *arg2 = 0 ;
  std::shared_ptr< MeshEntity > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshEntity > *)jarg1;
  arg1 = (MeshEntity *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (GeomEntity *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "GeomEntity & is null", 0);
    return ;
  } 
  (arg1)->setClassification(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEntity_getNodes(void * jarg1) {
  void * jresult ;
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  std::shared_ptr< MeshEntity const > *smartarg1 = 0 ;
  vector< Node * > result;
  
  
  smartarg1 = (std::shared_ptr< const MeshEntity > *)jarg1;
  arg1 = (MeshEntity *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((MeshEntity const *)arg1)->getNodes();
  jresult = new vector< Node * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshVertex() {
  void * jresult ;
  MeshVertex *result = 0 ;
  
  result = (MeshVertex *)new MeshVertex();
  
  jresult = result ? new std::shared_ptr<  MeshVertex >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshVertex(void * jarg1) {
  MeshVertex *arg1 = (MeshVertex *) 0 ;
  std::shared_ptr< MeshVertex > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshVertex > *)jarg1;
  arg1 = (MeshVertex *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshVertex_Edges(void * jarg1) {
  void * jresult ;
  MeshVertex *arg1 = (MeshVertex *) 0 ;
  std::shared_ptr< MeshVertex const > *smartarg1 = 0 ;
  std::vector< MeshEdge * > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const MeshVertex > *)jarg1;
  arg1 = (MeshVertex *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< MeshEdge * > *) &((MeshVertex const *)arg1)->Edges();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshVertex_getEdge(void * jarg1, int jarg2) {
  void * jresult ;
  MeshVertex *arg1 = (MeshVertex *) 0 ;
  int arg2 ;
  std::shared_ptr< MeshVertex > *smartarg1 = 0 ;
  MeshEdge *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshVertex > *)jarg1;
  arg1 = (MeshVertex *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (MeshEdge *)(arg1)->getEdge(arg2);
  
  jresult = result ? new std::shared_ptr<  MeshEdge >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshVertex_addEdge(void * jarg1, void * jarg2) {
  MeshVertex *arg1 = (MeshVertex *) 0 ;
  MeshEdge *arg2 = 0 ;
  std::shared_ptr< MeshVertex > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshVertex > *)jarg1;
  arg1 = (MeshVertex *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (MeshEdge *)(((std::shared_ptr<  MeshEdge > *)jarg2) ? ((std::shared_ptr<  MeshEdge > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeshEdge & reference is null", 0);
    return ;
  } 
  (arg1)->addEdge(*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MeshVertex_numEdges(void * jarg1) {
  unsigned long jresult ;
  MeshVertex *arg1 = (MeshVertex *) 0 ;
  std::shared_ptr< MeshVertex > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<  MeshVertex > *)jarg1;
  arg1 = (MeshVertex *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->numEdges();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshVertex_get_dimensions(void * jarg1) {
  int jresult ;
  MeshVertex *arg1 = (MeshVertex *) 0 ;
  std::shared_ptr< MeshVertex const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const MeshVertex > *)jarg1;
  arg1 = (MeshVertex *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((MeshVertex const *)arg1)->get_dimensions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshVertex_getNodes(void * jarg1) {
  void * jresult ;
  MeshVertex *arg1 = (MeshVertex *) 0 ;
  std::shared_ptr< MeshVertex const > *smartarg1 = 0 ;
  std::vector< Node * > result;
  
  
  smartarg1 = (std::shared_ptr< const MeshVertex > *)jarg1;
  arg1 = (MeshVertex *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((MeshVertex const *)arg1)->getNodes();
  jresult = new std::vector< Node * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshEdge() {
  void * jresult ;
  MeshEdge *result = 0 ;
  
  result = (MeshEdge *)new MeshEdge();
  
  jresult = result ? new std::shared_ptr<  MeshEdge >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshEdge(void * jarg1) {
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  std::shared_ptr< MeshEdge > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshEdge > *)jarg1;
  arg1 = (MeshEdge *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_getVertex(void * jarg1, int jarg2) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  int arg2 ;
  std::shared_ptr< MeshEdge const > *smartarg1 = 0 ;
  MeshVertex *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const MeshEdge > *)jarg1;
  arg1 = (MeshEdge *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (MeshVertex *)((MeshEdge const *)arg1)->getVertex(arg2);
  
  jresult = result ? new std::shared_ptr< const MeshVertex >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_Faces(void * jarg1) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  std::shared_ptr< MeshEdge const > *smartarg1 = 0 ;
  std::vector< MeshFace * > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const MeshEdge > *)jarg1;
  arg1 = (MeshEdge *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< MeshFace * > *) &((MeshEdge const *)arg1)->Faces();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_getFace(void * jarg1, int jarg2) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  int arg2 ;
  std::shared_ptr< MeshEdge > *smartarg1 = 0 ;
  MeshFace *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshEdge > *)jarg1;
  arg1 = (MeshEdge *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (MeshFace *)(arg1)->getFace(arg2);
  
  jresult = result ? new std::shared_ptr<  MeshFace >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdge_addVertex(void * jarg1, void * jarg2, int jarg3) {
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  MeshVertex *arg2 = 0 ;
  int arg3 ;
  std::shared_ptr< MeshEdge > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshEdge > *)jarg1;
  arg1 = (MeshEdge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (MeshVertex *)(((std::shared_ptr<  MeshVertex > *)jarg2) ? ((std::shared_ptr<  MeshVertex > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeshVertex & reference is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->addVertex(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdge_addFace(void * jarg1, void * jarg2) {
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  MeshFace *arg2 = 0 ;
  std::shared_ptr< MeshEdge > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshEdge > *)jarg1;
  arg1 = (MeshEdge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (MeshFace *)(((std::shared_ptr<  MeshFace > *)jarg2) ? ((std::shared_ptr<  MeshFace > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeshFace & reference is null", 0);
    return ;
  } 
  (arg1)->addFace(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_otherVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  MeshVertex *arg2 = 0 ;
  std::shared_ptr< MeshEdge const > *smartarg1 = 0 ;
  MeshVertex *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const MeshEdge > *)jarg1;
  arg1 = (MeshEdge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (MeshVertex *)(((std::shared_ptr< const MeshVertex > *)jarg2) ? ((std::shared_ptr< const MeshVertex > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeshVertex const & reference is null", 0);
    return 0;
  } 
  result = (MeshVertex *)((MeshEdge const *)arg1)->otherVertex((MeshVertex const &)*arg2);
  
  jresult = result ? new std::shared_ptr<  MeshVertex >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshEdge_isConnected__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  MeshEdge *arg2 = 0 ;
  std::shared_ptr< MeshEdge const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const MeshEdge > *)jarg1;
  arg1 = (MeshEdge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (MeshEdge *)(((std::shared_ptr< const MeshEdge > *)jarg2) ? ((std::shared_ptr< const MeshEdge > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeshEdge const & reference is null", 0);
    return 0;
  } 
  result = (bool)((MeshEdge const *)arg1)->isConnected((MeshEdge const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshEdge_isConnected__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  MeshVertex *arg2 = 0 ;
  std::shared_ptr< MeshEdge const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const MeshEdge > *)jarg1;
  arg1 = (MeshEdge *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (MeshVertex *)(((std::shared_ptr< const MeshVertex > *)jarg2) ? ((std::shared_ptr< const MeshVertex > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeshVertex const & reference is null", 0);
    return 0;
  } 
  result = (bool)((MeshEdge const *)arg1)->isConnected((MeshVertex const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshEdge_get_dimensions(void * jarg1) {
  int jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  std::shared_ptr< MeshEdge const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const MeshEdge > *)jarg1;
  arg1 = (MeshEdge *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((MeshEdge const *)arg1)->get_dimensions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_getNodes(void * jarg1) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  std::shared_ptr< MeshEdge const > *smartarg1 = 0 ;
  std::vector< Node * > result;
  
  
  smartarg1 = (std::shared_ptr< const MeshEdge > *)jarg1;
  arg1 = (MeshEdge *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((MeshEdge const *)arg1)->getNodes();
  jresult = new std::vector< Node * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshFace() {
  void * jresult ;
  MeshFace *result = 0 ;
  
  result = (MeshFace *)new MeshFace();
  
  jresult = result ? new std::shared_ptr<  MeshFace >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshFace(void * jarg1) {
  MeshFace *arg1 = (MeshFace *) 0 ;
  std::shared_ptr< MeshFace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_Edges(void * jarg1) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  std::shared_ptr< MeshFace const > *smartarg1 = 0 ;
  std::vector< MeshEdge * > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< MeshEdge * > *) &((MeshFace const *)arg1)->Edges();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_getEdge(void * jarg1, int jarg2) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  int arg2 ;
  std::shared_ptr< MeshFace > *smartarg1 = 0 ;
  MeshEdge *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (MeshEdge *)(arg1)->getEdge(arg2);
  
  jresult = result ? new std::shared_ptr<  MeshEdge >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_getRegion(void * jarg1, int jarg2) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  int arg2 ;
  std::shared_ptr< MeshFace > *smartarg1 = 0 ;
  MeshRegion *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  result = (MeshRegion *)(arg1)->getRegion(arg2);
  
  jresult = result ? new std::shared_ptr<  MeshRegion >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFace_addEdge(void * jarg1, void * jarg2) {
  MeshFace *arg1 = (MeshFace *) 0 ;
  MeshEdge *arg2 = 0 ;
  std::shared_ptr< MeshFace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (MeshEdge *)(((std::shared_ptr<  MeshEdge > *)jarg2) ? ((std::shared_ptr<  MeshEdge > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeshEdge & reference is null", 0);
    return ;
  } 
  (arg1)->addEdge(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFace_addRegion(void * jarg1, void * jarg2) {
  MeshFace *arg1 = (MeshFace *) 0 ;
  MeshRegion *arg2 = 0 ;
  std::shared_ptr< MeshFace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (MeshRegion *)(((std::shared_ptr<  MeshRegion > *)jarg2) ? ((std::shared_ptr<  MeshRegion > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MeshRegion & reference is null", 0);
    return ;
  } 
  (arg1)->addRegion(*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_MeshFace_numEdges(void * jarg1) {
  unsigned long jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  std::shared_ptr< MeshFace > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<  MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->numEdges();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MeshFace_area(void * jarg1) {
  double jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  std::shared_ptr< MeshFace > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->area();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshFace_get_dimensions(void * jarg1) {
  int jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  std::shared_ptr< MeshFace const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)((MeshFace const *)arg1)->get_dimensions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_getNodes(void * jarg1) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  std::shared_ptr< MeshFace const > *smartarg1 = 0 ;
  std::vector< Node * > result;
  
  
  smartarg1 = (std::shared_ptr< const MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((MeshFace const *)arg1)->getNodes();
  jresult = new std::vector< Node * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_getVertices(void * jarg1) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  std::shared_ptr< MeshFace const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< MeshVertex const * > > result;
  
  
  smartarg1 = (std::shared_ptr< const MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((MeshFace const *)arg1)->getVertices();
  jresult = new std::vector< MeshVertex const * >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFace_MeshEdges_set(void * jarg1, void * jarg2) {
  MeshFace *arg1 = (MeshFace *) 0 ;
  std::vector< MeshEdge * > *arg2 = (std::vector< MeshEdge * > *) 0 ;
  std::shared_ptr< MeshFace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< MeshEdge * > *)jarg2; 
  if (arg1) (arg1)->MeshEdges = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_MeshEdges_get(void * jarg1) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  std::shared_ptr< MeshFace > *smartarg1 = 0 ;
  std::vector< MeshEdge * > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  MeshFace > *)jarg1;
  arg1 = (MeshFace *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< MeshEdge * > *)& ((arg1)->MeshEdges);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Node() {
  void * jresult ;
  Node *result = 0 ;
  
  result = (Node *)new Node();
  
  jresult = result ? new std::shared_ptr<  Node >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Node(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  std::shared_ptr< Node > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Node > *)jarg1;
  arg1 = (Node *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Node_x(void * jarg1) {
  double jresult ;
  Node *arg1 = (Node *) 0 ;
  std::shared_ptr< Node const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const Node > *)jarg1;
  arg1 = (Node *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((Node const *)arg1)->x();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Node_y(void * jarg1) {
  double jresult ;
  Node *arg1 = (Node *) 0 ;
  std::shared_ptr< Node const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const Node > *)jarg1;
  arg1 = (Node *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((Node const *)arg1)->y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Node_z(void * jarg1) {
  double jresult ;
  Node *arg1 = (Node *) 0 ;
  std::shared_ptr< Node const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const Node > *)jarg1;
  arg1 = (Node *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)((Node const *)arg1)->z();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_pt__SWIG_0(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  point *arg2 = 0 ;
  std::shared_ptr< Node > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Node > *)jarg1;
  arg1 = (Node *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (point *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "point const & is null", 0);
    return ;
  } 
  (arg1)->pt((point const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_pt__SWIG_1(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  std::shared_ptr< Node const > *smartarg1 = 0 ;
  point *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const Node > *)jarg1;
  arg1 = (Node *)(smartarg1 ? smartarg1->get() : 0); 
  result = (point *) &((Node const *)arg1)->pt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_ID_set(void * jarg1, unsigned long jarg2) {
  Node *arg1 = (Node *) 0 ;
  size_t arg2 ;
  std::shared_ptr< Node > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Node > *)jarg1;
  arg1 = (Node *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Node_ID_get(void * jarg1) {
  unsigned long jresult ;
  Node *arg1 = (Node *) 0 ;
  std::shared_ptr< Node > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<  Node > *)jarg1;
  arg1 = (Node *)(smartarg1 ? smartarg1->get() : 0); 
  result =  ((arg1)->ID);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_getDOFs(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  std::shared_ptr< Node const > *smartarg1 = 0 ;
  std::vector< DOF * > result;
  
  
  smartarg1 = (std::shared_ptr< const Node > *)jarg1;
  arg1 = (Node *)(smartarg1 ? smartarg1->get() : 0); 
  result = ((Node const *)arg1)->getDOFs();
  jresult = new std::vector< DOF * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_newDOF(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  std::shared_ptr< Node > *smartarg1 = 0 ;
  DOF *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Node > *)jarg1;
  arg1 = (Node *)(smartarg1 ? smartarg1->get() : 0); 
  result = (DOF *)(arg1)->newDOF();
  
  jresult = result ? new std::shared_ptr<  DOF >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DOF_Free_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DOF_Zero_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DOF_Fixed_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ndof_set(unsigned long jarg1) {
  size_t arg1 ;
  
  arg1 = (size_t)jarg1; 
  ndof = arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ndof_get() {
  unsigned long jresult ;
  size_t result;
  
  result = ndof;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DOF() {
  void * jresult ;
  DOF *result = 0 ;
  
  result = (DOF *)new DOF();
  
  jresult = result ? new std::shared_ptr<  DOF >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DOF(void * jarg1) {
  DOF *arg1 = (DOF *) 0 ;
  std::shared_ptr< DOF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  DOF > *)jarg1;
  arg1 = (DOF *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOF_set_value(void * jarg1, double jarg2) {
  DOF *arg1 = (DOF *) 0 ;
  double arg2 ;
  std::shared_ptr< DOF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  DOF > *)jarg1;
  arg1 = (DOF *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  (arg1)->set_value(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_DOF_get_value(void * jarg1) {
  double jresult ;
  DOF *arg1 = (DOF *) 0 ;
  std::shared_ptr< DOF > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr<  DOF > *)jarg1;
  arg1 = (DOF *)(smartarg1 ? smartarg1->get() : 0); 
  result = (double)(arg1)->get_value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOF_set_status(void * jarg1, int jarg2) {
  DOF *arg1 = (DOF *) 0 ;
  int arg2 ;
  std::shared_ptr< DOF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  DOF > *)jarg1;
  arg1 = (DOF *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  (arg1)->set_status(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DOF_get_status(void * jarg1) {
  int jresult ;
  DOF *arg1 = (DOF *) 0 ;
  std::shared_ptr< DOF > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  DOF > *)jarg1;
  arg1 = (DOF *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int)(arg1)->get_status();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DOF_set_eqnumber(void * jarg1, unsigned long jarg2) {
  DOF *arg1 = (DOF *) 0 ;
  size_t arg2 ;
  std::shared_ptr< DOF > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  DOF > *)jarg1;
  arg1 = (DOF *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (size_t)jarg2; 
  (arg1)->set_eqnumber(arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DOF_get_eqnumber(void * jarg1) {
  unsigned long jresult ;
  DOF *arg1 = (DOF *) 0 ;
  std::shared_ptr< DOF > *smartarg1 = 0 ;
  size_t result;
  
  
  smartarg1 = (std::shared_ptr<  DOF > *)jarg1;
  arg1 = (DOF *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->get_eqnumber();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT std::shared_ptr< MeshEntity > * SWIGSTDCALL CSharp_MeshVertex_SWIGSmartPtrUpcast(std::shared_ptr< MeshVertex > *jarg1) {
    return jarg1 ? new std::shared_ptr< MeshEntity >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< MeshEntity > * SWIGSTDCALL CSharp_MeshEdge_SWIGSmartPtrUpcast(std::shared_ptr< MeshEdge > *jarg1) {
    return jarg1 ? new std::shared_ptr< MeshEntity >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< MeshEntity > * SWIGSTDCALL CSharp_MeshFace_SWIGSmartPtrUpcast(std::shared_ptr< MeshFace > *jarg1) {
    return jarg1 ? new std::shared_ptr< MeshEntity >(*jarg1) : 0;
}

#ifdef __cplusplus
}
#endif

