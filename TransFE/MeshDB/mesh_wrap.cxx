/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_MeshDB(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_MeshDB(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_MeshDB(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "mesh.h"
#include "meshentity.h"
#include "meshface.h"
#include "meshedge.h"
#include "node.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_Mesh() {
  void * jresult ;
  Mesh *result = 0 ;
  
  result = (Mesh *)new Mesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Mesh(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_newRegion(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  MeshRegion *result = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  result = (MeshRegion *)(arg1)->newRegion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_newFace(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  MeshFace *result = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  result = (MeshFace *)(arg1)->newFace();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_newEdge(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  MeshEdge *result = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  result = (MeshEdge *)(arg1)->newEdge();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_newVertex(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  MeshVertex *result = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  result = (MeshVertex *)(arg1)->newVertex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_newNode(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  Node *result = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  result = (Node *)(arg1)->newNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getRegion(void * jarg1, int jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  MeshRegion *result = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MeshRegion *)(arg1)->getRegion(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getFace(void * jarg1, int jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  MeshFace *result = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MeshFace *)(arg1)->getFace(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getEdge(void * jarg1, int jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  MeshEdge *result = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MeshEdge *)(arg1)->getEdge(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getVertex(void * jarg1, int jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  MeshVertex *result = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MeshVertex *)(arg1)->getVertex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getNode(void * jarg1, int jarg2) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int arg2 ;
  Node *result = 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Node *)(arg1)->getNode(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getFirstRegion(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  SwigValueWrapper< vector< unique_ptr< MeshRegion > >::iterator > result;
  
  arg1 = (Mesh *)jarg1; 
  result = (arg1)->getFirstRegion();
  jresult = new vector< unique_ptr< MeshRegion > >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getLastRegion(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  SwigValueWrapper< vector< unique_ptr< MeshRegion > >::iterator > result;
  
  arg1 = (Mesh *)jarg1; 
  result = (arg1)->getLastRegion();
  jresult = new vector< unique_ptr< MeshRegion > >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getFirstFace(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  SwigValueWrapper< vector< unique_ptr< MeshFace > >::iterator > result;
  
  arg1 = (Mesh *)jarg1; 
  result = (arg1)->getFirstFace();
  jresult = new vector< unique_ptr< MeshFace > >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getLastFace(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  SwigValueWrapper< vector< unique_ptr< MeshFace > >::iterator > result;
  
  arg1 = (Mesh *)jarg1; 
  result = (arg1)->getLastFace();
  jresult = new vector< unique_ptr< MeshFace > >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getFirstEdge(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  SwigValueWrapper< vector< unique_ptr< MeshEdge > >::iterator > result;
  
  arg1 = (Mesh *)jarg1; 
  result = (arg1)->getFirstEdge();
  jresult = new vector< unique_ptr< MeshEdge > >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getLastEdge(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  SwigValueWrapper< vector< unique_ptr< MeshEdge > >::iterator > result;
  
  arg1 = (Mesh *)jarg1; 
  result = (arg1)->getLastEdge();
  jresult = new vector< unique_ptr< MeshEdge > >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getFirstVertex(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  SwigValueWrapper< vector< unique_ptr< MeshVertex > >::iterator > result;
  
  arg1 = (Mesh *)jarg1; 
  result = (arg1)->getFirstVertex();
  jresult = new vector< unique_ptr< MeshVertex > >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getLastVertex(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  SwigValueWrapper< vector< unique_ptr< MeshVertex > >::iterator > result;
  
  arg1 = (Mesh *)jarg1; 
  result = (arg1)->getLastVertex();
  jresult = new vector< unique_ptr< MeshVertex > >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getFirstNode(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  SwigValueWrapper< vector< unique_ptr< Node > >::iterator > result;
  
  arg1 = (Mesh *)jarg1; 
  result = (arg1)->getFirstNode();
  jresult = new vector< unique_ptr< Node > >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Mesh_getLastNode(void * jarg1) {
  void * jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  SwigValueWrapper< vector< unique_ptr< Node > >::iterator > result;
  
  arg1 = (Mesh *)jarg1; 
  result = (arg1)->getLastNode();
  jresult = new vector< unique_ptr< Node > >::iterator(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_numRegions(void * jarg1) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  result = (int)(arg1)->numRegions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_numFaces(void * jarg1) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  result = (int)(arg1)->numFaces();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_numEdges(void * jarg1) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  result = (int)(arg1)->numEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_numVertexes(void * jarg1) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  result = (int)(arg1)->numVertexes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Mesh_numNodes(void * jarg1) {
  int jresult ;
  Mesh *arg1 = (Mesh *) 0 ;
  int result;
  
  arg1 = (Mesh *)jarg1; 
  result = (int)(arg1)->numNodes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_reorder(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  (arg1)->reorder();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_reorder2(void * jarg1) {
  Mesh *arg1 = (Mesh *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  (arg1)->reorder2();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_exportDX(void * jarg1, void * jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  arg1 = (Mesh *)jarg1; 
  argp2 = (string *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null string", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->exportDX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_readMesh(void * jarg1, void * jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  string arg2 ;
  string *argp2 ;
  
  arg1 = (Mesh *)jarg1; 
  argp2 = (string *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null string", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->readMesh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Mesh_readAttributes(void * jarg1, char * jarg2) {
  Mesh *arg1 = (Mesh *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Mesh *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->readAttributes((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEntity_ID_set(void * jarg1, int jarg2) {
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  int arg2 ;
  
  arg1 = (MeshEntity *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshEntity_ID_get(void * jarg1) {
  int jresult ;
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  int result;
  
  arg1 = (MeshEntity *)jarg1; 
  result = (int) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshEntity_get_dimensions(void * jarg1) {
  int jresult ;
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  int result;
  
  arg1 = (MeshEntity *)jarg1; 
  result = (int)((MeshEntity const *)arg1)->get_dimensions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEntity_node_set(void * jarg1, void * jarg2) {
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  arg1 = (MeshEntity *)jarg1; 
  arg2 = (Node *)jarg2; 
  if (arg1) (arg1)->node = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEntity_node_get(void * jarg1) {
  void * jresult ;
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  Node *result = 0 ;
  
  arg1 = (MeshEntity *)jarg1; 
  result = (Node *) ((arg1)->node);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEntity_getClassification(void * jarg1) {
  void * jresult ;
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  GeomEntity *result = 0 ;
  
  arg1 = (MeshEntity *)jarg1; 
  result = (GeomEntity *)(arg1)->getClassification();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEntity_setClassification(void * jarg1, void * jarg2) {
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  GeomEntity *arg2 = (GeomEntity *) 0 ;
  
  arg1 = (MeshEntity *)jarg1; 
  arg2 = (GeomEntity *)jarg2; 
  (arg1)->setClassification(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEntity_getNodes(void * jarg1) {
  void * jresult ;
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  SwigValueWrapper< vector< Node * > > result;
  
  arg1 = (MeshEntity *)jarg1; 
  result = (arg1)->getNodes();
  jresult = new vector< Node * >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshEntity(void * jarg1) {
  MeshEntity *arg1 = (MeshEntity *) 0 ;
  
  arg1 = (MeshEntity *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshFace() {
  void * jresult ;
  MeshFace *result = 0 ;
  
  result = (MeshFace *)new MeshFace();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_getFirstEdge(void * jarg1) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  SwigValueWrapper< vector< MeshEdge * >::iterator > result;
  
  arg1 = (MeshFace *)jarg1; 
  result = (arg1)->getFirstEdge();
  jresult = new vector< MeshEdge * >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_getLastEdge(void * jarg1) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  SwigValueWrapper< vector< MeshEdge * >::iterator > result;
  
  arg1 = (MeshFace *)jarg1; 
  result = (arg1)->getLastEdge();
  jresult = new vector< MeshEdge * >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_getEdge(void * jarg1, int jarg2) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  int arg2 ;
  MeshEdge *result = 0 ;
  
  arg1 = (MeshFace *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MeshEdge *)(arg1)->getEdge(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_getRegion(void * jarg1, int jarg2) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  int arg2 ;
  MeshRegion *result = 0 ;
  
  arg1 = (MeshFace *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MeshRegion *)(arg1)->getRegion(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFace_addEdge(void * jarg1, void * jarg2) {
  MeshFace *arg1 = (MeshFace *) 0 ;
  MeshEdge *arg2 = (MeshEdge *) 0 ;
  
  arg1 = (MeshFace *)jarg1; 
  arg2 = (MeshEdge *)jarg2; 
  (arg1)->addEdge(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshFace_addRegion(void * jarg1, void * jarg2) {
  MeshFace *arg1 = (MeshFace *) 0 ;
  MeshRegion *arg2 = (MeshRegion *) 0 ;
  
  arg1 = (MeshFace *)jarg1; 
  arg2 = (MeshRegion *)jarg2; 
  (arg1)->addRegion(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshFace_numEdges(void * jarg1) {
  int jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  int result;
  
  arg1 = (MeshFace *)jarg1; 
  result = (int)(arg1)->numEdges();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MeshFace_area(void * jarg1) {
  double jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  double result;
  
  arg1 = (MeshFace *)jarg1; 
  result = (double)(arg1)->area();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshFace_get_dimensions(void * jarg1) {
  int jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  int result;
  
  arg1 = (MeshFace *)jarg1; 
  result = (int)((MeshFace const *)arg1)->get_dimensions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_getNodes(void * jarg1) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  SwigValueWrapper< vector< Node * > > result;
  
  arg1 = (MeshFace *)jarg1; 
  result = (arg1)->getNodes();
  jresult = new vector< Node * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshFace_getVertexes(void * jarg1) {
  void * jresult ;
  MeshFace *arg1 = (MeshFace *) 0 ;
  SwigValueWrapper< vector< MeshVertex * > > result;
  
  arg1 = (MeshFace *)jarg1; 
  result = (arg1)->getVertexes();
  jresult = new vector< MeshVertex * >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshFace(void * jarg1) {
  MeshFace *arg1 = (MeshFace *) 0 ;
  
  arg1 = (MeshFace *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MeshEdge() {
  void * jresult ;
  MeshEdge *result = 0 ;
  
  result = (MeshEdge *)new MeshEdge();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_getVertex(void * jarg1, int jarg2) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  int arg2 ;
  MeshVertex *result = 0 ;
  
  arg1 = (MeshEdge *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MeshVertex *)(arg1)->getVertex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_getFirstFace(void * jarg1) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  SwigValueWrapper< vector< MeshFace * >::iterator > result;
  
  arg1 = (MeshEdge *)jarg1; 
  result = (arg1)->getFirstFace();
  jresult = new vector< MeshFace * >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_getLastFace(void * jarg1) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  SwigValueWrapper< vector< MeshFace * >::iterator > result;
  
  arg1 = (MeshEdge *)jarg1; 
  result = (arg1)->getLastFace();
  jresult = new vector< MeshFace * >::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_getFace(void * jarg1, int jarg2) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  int arg2 ;
  MeshFace *result = 0 ;
  
  arg1 = (MeshEdge *)jarg1; 
  arg2 = (int)jarg2; 
  result = (MeshFace *)(arg1)->getFace(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdge_addVertex(void * jarg1, void * jarg2, int jarg3) {
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  MeshVertex *arg2 = (MeshVertex *) 0 ;
  int arg3 ;
  
  arg1 = (MeshEdge *)jarg1; 
  arg2 = (MeshVertex *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addVertex(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MeshEdge_addFace(void * jarg1, void * jarg2) {
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  MeshFace *arg2 = (MeshFace *) 0 ;
  
  arg1 = (MeshEdge *)jarg1; 
  arg2 = (MeshFace *)jarg2; 
  (arg1)->addFace(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_getFaces(void * jarg1) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  SwigValueWrapper< set< MeshFace * > > result;
  
  arg1 = (MeshEdge *)jarg1; 
  result = (arg1)->getFaces();
  jresult = new set< MeshFace * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_otherVertex(void * jarg1, void * jarg2) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  MeshVertex *arg2 = (MeshVertex *) 0 ;
  MeshVertex *result = 0 ;
  
  arg1 = (MeshEdge *)jarg1; 
  arg2 = (MeshVertex *)jarg2; 
  result = (MeshVertex *)(arg1)->otherVertex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshEdge_isConnected__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  MeshEdge *arg2 = (MeshEdge *) 0 ;
  bool result;
  
  arg1 = (MeshEdge *)jarg1; 
  arg2 = (MeshEdge *)jarg2; 
  result = (bool)(arg1)->isConnected(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MeshEdge_isConnected__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  MeshVertex *arg2 = (MeshVertex *) 0 ;
  bool result;
  
  arg1 = (MeshEdge *)jarg1; 
  arg2 = (MeshVertex *)jarg2; 
  result = (bool)(arg1)->isConnected(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MeshEdge_get_dimensions(void * jarg1) {
  int jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  int result;
  
  arg1 = (MeshEdge *)jarg1; 
  result = (int)((MeshEdge const *)arg1)->get_dimensions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MeshEdge_getNodes(void * jarg1) {
  void * jresult ;
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  SwigValueWrapper< vector< Node * > > result;
  
  arg1 = (MeshEdge *)jarg1; 
  result = (arg1)->getNodes();
  jresult = new vector< Node * >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MeshEdge(void * jarg1) {
  MeshEdge *arg1 = (MeshEdge *) 0 ;
  
  arg1 = (MeshEdge *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Node_x(void * jarg1) {
  double jresult ;
  Node *arg1 = (Node *) 0 ;
  double result;
  
  arg1 = (Node *)jarg1; 
  result = (double)(arg1)->x();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Node_y(void * jarg1) {
  double jresult ;
  Node *arg1 = (Node *) 0 ;
  double result;
  
  arg1 = (Node *)jarg1; 
  result = (double)(arg1)->y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Node_z(void * jarg1) {
  double jresult ;
  Node *arg1 = (Node *) 0 ;
  double result;
  
  arg1 = (Node *)jarg1; 
  result = (double)(arg1)->z();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_pt__SWIG_0(void * jarg1, void * jarg2) {
  Node *arg1 = (Node *) 0 ;
  point arg2 ;
  point *argp2 ;
  
  arg1 = (Node *)jarg1; 
  argp2 = (point *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null point", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->pt(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_pt__SWIG_1(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  point result;
  
  arg1 = (Node *)jarg1; 
  result = (arg1)->pt();
  jresult = new point(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Node_ID_set(void * jarg1, int jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  arg1 = (Node *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Node_ID_get(void * jarg1) {
  int jresult ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  arg1 = (Node *)jarg1; 
  result = (int) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Node() {
  void * jresult ;
  Node *result = 0 ;
  
  result = (Node *)new Node();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Node(void * jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  arg1 = (Node *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_getDOFs(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  vector< DOF * > result;
  
  arg1 = (Node *)jarg1; 
  result = (arg1)->getDOFs();
  jresult = new vector< DOF * >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Node_newDOF(void * jarg1) {
  void * jresult ;
  Node *arg1 = (Node *) 0 ;
  DOF *result = 0 ;
  
  arg1 = (Node *)jarg1; 
  result = (DOF *)(arg1)->newDOF();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT MeshEntity * SWIGSTDCALL CSharp_MeshFace_SWIGUpcast(MeshFace *jarg1) {
    return (MeshEntity *)jarg1;
}

SWIGEXPORT MeshEntity * SWIGSTDCALL CSharp_MeshEdge_SWIGUpcast(MeshEdge *jarg1) {
    return (MeshEntity *)jarg1;
}

#ifdef __cplusplus
}
#endif

