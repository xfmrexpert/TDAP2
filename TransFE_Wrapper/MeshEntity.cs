//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MeshEntity : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal MeshEntity(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeshEntity obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MeshEntity() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          TransFEPINVOKE.delete_MeshEntity(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint ID {
    set {
      TransFEPINVOKE.MeshEntity_ID_set(swigCPtr, value);
      if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = TransFEPINVOKE.MeshEntity_ID_get(swigCPtr);
      if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public virtual int get_dimensions() {
    int ret = TransFEPINVOKE.MeshEntity_get_dimensions(swigCPtr);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Node node {
    set {
      TransFEPINVOKE.MeshEntity_node_set(swigCPtr, Node.getCPtr(value));
      if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = TransFEPINVOKE.MeshEntity_node_get(swigCPtr);
      Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Node(cPtr, true);
      if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_GeomEntity getClassification() {
    global::System.IntPtr cPtr = TransFEPINVOKE.MeshEntity_getClassification(swigCPtr);
    SWIGTYPE_p_GeomEntity ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GeomEntity(cPtr, false);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setClassification(SWIGTYPE_p_GeomEntity arg0) {
    TransFEPINVOKE.MeshEntity_setClassification(swigCPtr, SWIGTYPE_p_GeomEntity.getCPtr(arg0));
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual NodePtrVec getNodes() {
    NodePtrVec ret = new NodePtrVec(TransFEPINVOKE.MeshEntity_getNodes(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
