//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Mesh : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Mesh(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Mesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Mesh() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          TransFEPINVOKE.delete_Mesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Mesh() : this(TransFEPINVOKE.new_Mesh(), true) {
  }

  public SWIGTYPE_p_MeshRegion newRegion() {
    SWIGTYPE_p_MeshRegion ret = new SWIGTYPE_p_MeshRegion(TransFEPINVOKE.Mesh_newRegion(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshFace newFace() {
    MeshFace ret = new MeshFace(TransFEPINVOKE.Mesh_newFace(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshEdge newEdge() {
    MeshEdge ret = new MeshEdge(TransFEPINVOKE.Mesh_newEdge(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshVertex newVertex() {
    MeshVertex ret = new MeshVertex(TransFEPINVOKE.Mesh_newVertex(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Node newNode() {
    Node ret = new Node(TransFEPINVOKE.Mesh_newNode(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_MeshRegion getRegion(uint n) {
    SWIGTYPE_p_MeshRegion ret = new SWIGTYPE_p_MeshRegion(TransFEPINVOKE.Mesh_getRegion(swigCPtr, n), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshFace getFace(uint n) {
    MeshFace ret = new MeshFace(TransFEPINVOKE.Mesh_getFace(swigCPtr, n), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshEdge getEdge(uint n) {
    MeshEdge ret = new MeshEdge(TransFEPINVOKE.Mesh_getEdge(swigCPtr, n), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshVertex getVertex(uint n) {
    MeshVertex ret = new MeshVertex(TransFEPINVOKE.Mesh_getVertex(swigCPtr, n), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Node getNode(uint n) {
    Node ret = new Node(TransFEPINVOKE.Mesh_getNode(swigCPtr, n), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshRegion_t_t__iterator getFirstRegion() {
    SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshRegion_t_t__iterator ret = new SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshRegion_t_t__iterator(TransFEPINVOKE.Mesh_getFirstRegion(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshRegion_t_t__iterator getLastRegion() {
    SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshRegion_t_t__iterator ret = new SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshRegion_t_t__iterator(TransFEPINVOKE.Mesh_getLastRegion(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshFace_t_t__iterator getFirstFace() {
    SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshFace_t_t__iterator ret = new SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshFace_t_t__iterator(TransFEPINVOKE.Mesh_getFirstFace(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshFace_t_t__iterator getLastFace() {
    SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshFace_t_t__iterator ret = new SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshFace_t_t__iterator(TransFEPINVOKE.Mesh_getLastFace(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshEdge_t_t__iterator getFirstEdge() {
    SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshEdge_t_t__iterator ret = new SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshEdge_t_t__iterator(TransFEPINVOKE.Mesh_getFirstEdge(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshEdge_t_t__iterator getLastEdge() {
    SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshEdge_t_t__iterator ret = new SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshEdge_t_t__iterator(TransFEPINVOKE.Mesh_getLastEdge(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshVertex_t_t__iterator getFirstVertex() {
    SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshVertex_t_t__iterator ret = new SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshVertex_t_t__iterator(TransFEPINVOKE.Mesh_getFirstVertex(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshVertex_t_t__iterator getLastVertex() {
    SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshVertex_t_t__iterator ret = new SWIGTYPE_p_std__vectorT_std__unique_ptrT_MeshVertex_t_t__iterator(TransFEPINVOKE.Mesh_getLastVertex(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__unique_ptrT_Node_t_t__iterator getFirstNode() {
    SWIGTYPE_p_std__vectorT_std__unique_ptrT_Node_t_t__iterator ret = new SWIGTYPE_p_std__vectorT_std__unique_ptrT_Node_t_t__iterator(TransFEPINVOKE.Mesh_getFirstNode(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__unique_ptrT_Node_t_t__iterator getLastNode() {
    SWIGTYPE_p_std__vectorT_std__unique_ptrT_Node_t_t__iterator ret = new SWIGTYPE_p_std__vectorT_std__unique_ptrT_Node_t_t__iterator(TransFEPINVOKE.Mesh_getLastNode(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint numRegions() {
    uint ret = TransFEPINVOKE.Mesh_numRegions(swigCPtr);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint numFaces() {
    uint ret = TransFEPINVOKE.Mesh_numFaces(swigCPtr);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint numEdges() {
    uint ret = TransFEPINVOKE.Mesh_numEdges(swigCPtr);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint numVertexes() {
    uint ret = TransFEPINVOKE.Mesh_numVertexes(swigCPtr);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint numNodes() {
    uint ret = TransFEPINVOKE.Mesh_numNodes(swigCPtr);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void reorder() {
    TransFEPINVOKE.Mesh_reorder(swigCPtr);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
  }

  public void reorder2() {
    TransFEPINVOKE.Mesh_reorder2(swigCPtr);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
  }

  public void readMesh(string meshfile) {
    TransFEPINVOKE.Mesh_readMesh(swigCPtr, meshfile);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
  }

  public void readAttributes(string attribfile) {
    TransFEPINVOKE.Mesh_readAttributes(swigCPtr, attribfile);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
  }

}
