//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MeshEdge : MeshEntity {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal MeshEdge(global::System.IntPtr cPtr, bool cMemoryOwn) : base(TransFEPINVOKE.MeshEdge_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeshEdge obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          TransFEPINVOKE.delete_MeshEdge(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public MeshEdge() : this(TransFEPINVOKE.new_MeshEdge(), true) {
  }

  public MeshVertex getVertex(int n) {
    global::System.IntPtr cPtr = TransFEPINVOKE.MeshEdge_getVertex(swigCPtr, n);
    MeshVertex ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeshVertex(cPtr, true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshFacePtrVec Faces() {
    MeshFacePtrVec ret = new MeshFacePtrVec(TransFEPINVOKE.MeshEdge_Faces(swigCPtr), false);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeshFace getFace(int n) {
    global::System.IntPtr cPtr = TransFEPINVOKE.MeshEdge_getFace(swigCPtr, n);
    MeshFace ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeshFace(cPtr, true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addVertex(MeshVertex new_vertex, int n) {
    TransFEPINVOKE.MeshEdge_addVertex(swigCPtr, MeshVertex.getCPtr(new_vertex), n);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addFace(MeshFace new_face) {
    TransFEPINVOKE.MeshEdge_addFace(swigCPtr, MeshFace.getCPtr(new_face));
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
  }

  public MeshVertex otherVertex(MeshVertex arg0) {
    global::System.IntPtr cPtr = TransFEPINVOKE.MeshEdge_otherVertex(swigCPtr, MeshVertex.getCPtr(arg0));
    MeshVertex ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeshVertex(cPtr, true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isConnected(MeshEdge arg0) {
    bool ret = TransFEPINVOKE.MeshEdge_isConnected__SWIG_0(swigCPtr, MeshEdge.getCPtr(arg0));
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isConnected(MeshVertex arg0) {
    bool ret = TransFEPINVOKE.MeshEdge_isConnected__SWIG_1(swigCPtr, MeshVertex.getCPtr(arg0));
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int get_dimensions() {
    int ret = TransFEPINVOKE.MeshEdge_get_dimensions(swigCPtr);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public NodePtrVec getNodes() {
    NodePtrVec ret = new NodePtrVec(TransFEPINVOKE.MeshEdge_getNodes(swigCPtr), true);
    if (TransFEPINVOKE.SWIGPendingException.Pending) throw TransFEPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
